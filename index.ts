import fs from 'fs';
import path from 'path';

// –ò—Å—Ö–æ–¥–Ω—ã–π –º–∞—Å—Å–∏–≤ email'–æ–≤
const emails = [
    { fio: '–ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á', email: 'example1@email.com' },
    { fio: '–ò–≤–∞–Ω–æ–≤ –ò –ò', email: 'example2@email.com' },
    { fio: '–õ–∏ –¢–∞–Ω', email: 'example3@email.com' },
    { fio: '', email: 'example4@email.com' },
    { fio: '–ü–µ—Ç—Ä–æ–≤ –ü–µ—Ç—è', email: 'example5@email.com' },
    { fio: '–í–∞—Å—è –ü–µ—Ç—Ä–æ–≤', email: 'example5@email.com' },
    { fio: '–ü–µ—Ç—Ä–æ–≤ –í–∞—Å—è', email: 'example999@email.com' }
];

type Email = {
    fio: string;
    email: string;
}

// –§–∞–π–ª –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö email'–æ–≤
const SENT_EMAILS_FILE = path.join(__dirname, 'sentEmails.json');

// –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö email'–æ–≤
const loadSentEmails = () => {
    if (fs.existsSync(SENT_EMAILS_FILE)) {
        return JSON.parse(fs.readFileSync(SENT_EMAILS_FILE, 'utf8'));
    }
    return [];
};

// –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö email'–æ–≤
const saveSentEmails = (sentEmails: Email[]) => {
    fs.writeFileSync(SENT_EMAILS_FILE, JSON.stringify(sentEmails, null, 2), 'utf8');
};

// –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ email (–∏–º–∏—Ç–∞—Ü–∏—è)
async function sendEmail({ email, fio }: Email) {
    return new Promise((resolve, reject) => {
        setTimeout(() => {
            if (Math.random() < 0.9) { // 90% —à–∞–Ω—Å —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
                console.log(`‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: ${email}`);
                resolve({ email, status: 'success' });
            } else {
                console.log(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: ${email}`);
                reject({ email, status: 'failed' });
            }
        }, Math.floor(Math.random() * 2000)); // –ò–º–∏—Ç–∞—Ü–∏—è –∑–∞–¥–µ—Ä–∂–∫–∏
    });
}

// –û—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ—Ü–µ—Å—Å —Ä–∞—Å—Å—ã–ª–∫–∏
async function sendBulkEmails() {
    const sentEmails = loadSentEmails(); // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö email'–æ–≤
    const queue = emails.filter(e => !sentEmails.includes(e.email)); // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–µ, –∫–æ—Ç–æ—Ä—ã–µ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã

    console.log(`üì® –ù–∞—á–∏–Ω–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É. –í—Å–µ–≥–æ ${queue.length} –Ω–æ–≤—ã—Ö email'–æ–≤.`);

    let results = [];
    let count = 0;

    for (let i = 0; i < queue.length; i++) {
        if (count >= 60) {
            console.log('‚è≥ –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç 60 –ø–∏—Å–µ–º –≤ –º–∏–Ω—É—Ç—É. –û–∂–∏–¥–∞–Ω–∏–µ...');
            await new Promise(resolve => setTimeout(resolve, 60000));
            count = 0;
        }

        try {
            const result = await sendEmail(queue[i]);
            results.push(result);
            sentEmails.push(queue[i].email);
            count++;
        } catch (error) {
            results.push(error);
        }
    }

    saveSentEmails(sentEmails); // –°–æ—Ö—Ä–∞–Ω—è–µ–º —É—Å–ø–µ—à–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
    console.log(`‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: ${results.filter(r => r.status === 'success').length}`);
}

// –ó–∞–ø—É—Å–∫
sendBulkEmails();